#define ZMK_POINTING_DEFAULT_MOVE_VAL 300  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 10   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <0>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 45 46 47 42 43 44>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 34 42 43 44 45 46 47>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB   &kp Q           &kp W           &kp E            &kp R            &kp T                                &mmv MOVE_UP                &kp Y  &kp U            &kp I             &kp O           &kp P              &kp BSLH
&kp ESC   &hml LGUI A     &hml LALT S     &hml LSHFT D     &hml LCTRL F     &kp G                &mmv MOVE_LEFT  &mkp LCLK  &mmv MOVE_RIGHT  &kp H  &hmr RCTRL J     &hmr RSHIFT K     &hmr RALT L     &hmr RGUI SEMI     &kp SQT
&kp LBKT  &kp Z           &kp X           &kp C            &kp V            &kp B    &kp C_MUTE                  &mmv MOVE_DOWN              &kp N  &kp M            &kp COMMA         &kp DOT         &kp FSLH           &kp RBKT
                                          &mo 2            &mo 1            &kp SPACE                                                        &kp BSPC                &kp DEL           &kp ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&kp F1      &kp F2           &kp F3           &kp F4            &kp F5            &kp N6                                   &mmv MOVE_UP                &kp F7     &kp F8            &kp F9             &kp F10          &kp F11          &kp F12
&kp GRAVE   &hml LGUI N1     &hml LALT N2     &hml LSHFT N3     &hml LCTRL N4     &kp N5                   &mmv MOVE_LEFT  &mkp LCLK  &mmv MOVE_RIGHT  &kp N6     &hmr RCTRL N7     &hmr RSHIFT N8     &hmr RALT N9     &hmr RGUI N0     &none
&none       &kp HOME         &kp PG_DN        &kp PG_UP         &kp END           &kp MINUS    &kp C_MUTE                  &mmv MOVE_DOWN              &kp EQUAL  &kp LEFT          &kp DOWN           &kp UP           &kp RIGHT        &none
                                              &trans            &trans            &trans                                                               &trans     &trans            &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        raise_layer {
            display-name = "CTRL";
            bindings = <
&bt BT_CLR_ALL   &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_CLR                                      &mmv MOVE_UP                &none  &kp PAUSE_BREAK  &kp SLCK   &kp PSCRN   &kp INS   &none
&rgb_ug RGB_OFF  &rgb_ug RGB_EFR  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF  &rgb_ug RGB_ON                  &mmv MOVE_LEFT  &mkp LCLK  &mmv MOVE_RIGHT  &none  &mkp RCLK        &mkp MCLK  &mkp MB4    &mkp MB5  &none
&out OUT_USB     &none            &none            &rgb_ug RGB_SPI  &none            &out OUT_BLE    &kp C_MUTE                      &mmv MOVE_DOWN              &none  &kp C_PREV       &kp K_PP   &kp K_NEXT  &none     &tog 3
                                                   &trans           &trans           &trans                                                                      &trans &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        gaming_layer {
            display-name = "FPS";
            bindings = <
&kp TAB   &kp T  &kp Q  &kp W  &kp E  &kp R                                &mmv MOVE_UP                &kp Y  &kp U  &kp I      &kp O    &kp P     &kp BSLH
&kp ESC   &kp G  &kp A  &kp S  &kp D  &kp F                &mmv MOVE_LEFT  &mkp LCLK  &mmv MOVE_RIGHT  &kp H  &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LBKT  &kp B  &kp Z  &kp X  &kp C  &kp V    &kp C_MUTE                  &mmv MOVE_DOWN              &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH  &tog 0
                 &kp LCTRL  &kp LSHIFT    &kp SPACE                                                    &kp BSPC      &kp DEL    &kp ENTER
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
